Q1. Japanese Cities


Query all attributes of every Japanese city in the CITY table.
The COUNTRYCODE for Japan is 'JPN'.

The CITY table is described as follows:
+-------------+--------------+
| Column Name | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+





Q2. Earnings of employees


We define an employee's total earnings to be their monthly salary x months worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as 2 space-separated integers.

Input Format

The Employee table containing employee data for a company is described as follows:
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| employee_id | INTEGER |
| name        | STRING  |
| months      | INTEGER |
| salary      | INTEGER |
+-------------+---------+
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is the their monthly salary.

Sample Input
+-----------+----------+--------+--------+
|employee_id | name     | months | salary|
+------------+----------+--------+-------+
|12228       | Rose     | 15     | 1968  |
|33645       | Angela   | 1      | 3443  |
|45692       | Frank    | 17     | 1608  |
|56118       | Patrick  | 7      | 1345  |
|59725       | Lisa     | 11     | 2330  |
|74197       | Kimberly | 16     | 4372  |
|78454       | Bonnie   | 8      | 1771  |
|83565       | Michael  | 6      | 2017  |
|98607       | Todd     | 5      | 3396  |
|99989       | Joe      | 9      | 3573  |
+-----------+----------+--------+--------+
Sample Output
69952 1

Explanation
+-----------+----------+--------+--------+----------+
|employee_id | name     | months | salary| earnings |
+------------+----------+--------+-------+----------+
|12228       | Rose     | 15     | 1968  | 29520    |
|33645       | Angela   | 1      | 3443  | 3443     |
|45692       | Frank    | 17     | 1608  | 27336    |
|56118       | Patrick  | 7      | 1345  | 9415     |
|59725       | Lisa     | 11     | 2330  | 25630    |
|74197       | Kimberly | 16     | 4372  | 69952    |
|78454       | Bonnie   | 8      | 1771  | 14168    |
|83565       | Michael  | 6      | 2017  | 12102    |
|98607       | Todd     | 5      | 3396  | 16980    |
|99989       | Joe      | 9      | 3573  | 32157    |
+-----------+----------+--------+--------+----------+
The maximum earnings value is 69952 . The only employee with earnings = 69952 is Kimberly, so we print the maximum earnings value (69952) and a count of the number of employees who have earned $69952 (which is 1) as two space-separated values.





Q3. Weather Observation Station 8


Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
+-------------+---------------+
| Column Name | Type          |
+-------------+---------------+
| ID          | NUMBER        |
| CITY        | VARCHAR2(21)  |
| STATE       | VARCHAR2(21)  |
| LAT_N       | NUMBER        |
| LONG_W      | NUMBER        |
+-------------+---------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Q4. Weather Observation Station 9


Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
+-------------+---------------+
| Column Name | Type          |
+-------------+---------------+
| ID          | NUMBER        |
| CITY        | VARCHAR2(21)  |
| STATE       | VARCHAR2(21)  |
| LAT_N       | NUMBER        |
| LONG_W      | NUMBER        |
+-------------+---------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.





Q5. More Than 75 Marks


Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Input Format

The STUDENTS table is described as follows:
+-------------+---------+
| Column      | Type    |
+-------------+---------+
| ID          | INTEGER |
| Name        | STRING  |
| Marks       | INTEGER |
+-------------+---------+
The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.

Sample Input
+----+----------+-------+
| ID | Name     | Marks |
+----+----------+-------+
| 1  | Ashley   | 81    |
| 2  | Samantha | 75    |
| 3  | Julia    | 76    |
| 4  | Belvet   | 84    |
+----+----------+-------+

Sample Output
Ashley
Julia
Belvet

Explanation

Only Ashley, Julia, and Belvet have Marks > 75. If you look at the last three characters of each of their names, there are no duplicates and 'ley' < 'lia' < 'vet'.





Q6. The Pads


Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.

Input Format

The OCCUPATIONS table is described as follows:
+-------------+-------------+
| Column      | Type        |
+-------------+-------------+
| Name        | STRING      |
| Occupation  | STRING      |
+-------------+-------------+
Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.

Sample Input

An OCCUPATIONS table that contains the following records:
+---------- +-----------+
| Name      | Occupation|
+-----------+-----------+
| Samantha  | Doctor    |
| Julia     | Actor     |
| Maria     | Actor     |
| Meera     | Singer    |
| Ashley    | Professor |
| Ketty     | Professor |
| Christeen | Professor |
| Jane      | Actor     |
| Jenny     | Doctor    |
| Priya     | Singer    |
+-----------+-----------+

Sample Output

Ashely(P)
Christeen(P)
Jane(A)
Jenny(D)
Julia(A)
Ketty(P)
Maria(A)
Meera(S)
Priya(S)
Samantha(D)
There are a total of 2 doctors.
There are a total of 2 singers.
There are a total of 3 actors.
There are a total of 3 professors.

Explanation

The results of the first query are formatted to the problem description's specifications.
The results of the second query are ascendingly ordered first by number of names corresponding to each profession (2 <= 2 <= 3 <= 3), and then alphabetically by profession (doctor <= singer, and actor <= professor).





Q7. Binary Search Tree 1


You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
+-------------+---------+
| Column      | Type    |
+-------------+---------+
| N           | INTEGER |
| P           | INTEGER |
+-------------+---------+
Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

Root: If node is root node.
Leaf: If node is leaf node.
Inner: If node is neither root nor leaf node.

Sample Input
+---+------+
| N | P    |
+---+------+
| 1 | 2    |
| 3 | 2    |
| 6 | 8    |
| 9 | 8    |
| 2 | 5    |
| 8 | 5    |
| 5 | NULL |
+---+------+
Sample Output

1 Leaf
2 Inner
3 Leaf
5 Root
6 Leaf
8 Inner
9 Leaf

Explanation

The Binary Tree below illustrates the sample:
                  5
            2           8  
         1     3     6  